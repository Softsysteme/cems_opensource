<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->
<!--- The default skin class for the Spark DropDownList component.
The skin for the anchor button for a DropDownList component
is defined by the DropDownListButtonSkin class.  

<p>In a custom skin class that uses transitions, set the
<code>itemDestructionPolicy</code> property to <code>none</code>
for the PopUpAnchor defined by the popUp property.</p>      

@see spark.components.DropDownList
@see spark.skins.spark.DropDownListButtonSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled=".5"> 
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[
		/**
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.DropDownList")]
		]]>
	</fx:Metadata> 

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			// When the drop down list is resized - save the values for when the popUp is next created
			private var dropDownWidth:Number, dropDownHeight:Number;
			
			[Bindable]private var matchAnchorWidth:Boolean = true;
			
			private function dropDownInit(event:FlexEvent):void {
				// listen for when resize events happen so we can save the drop down size
				dropDown.addEventListener("resizeEnd", resizeFinished, false, 0, true);
				
				if (!isNaN(dropDownWidth)) {
					// have to turn this off since the width no-longer matches the anchor width
					matchAnchorWidth = false;
					// set the explicit width/height to what it was last resized to
					dropDown.explicitWidth = dropDownWidth;
					dropDown.explicitHeight = dropDownHeight;
				}
			}
			
			private function resizeFinished(event:ResizeEvent):void {
				// have to save the explicit width/height for when the popup is next opened
				dropDownWidth = dropDown.width;
				dropDownHeight = dropDown.height;
			}
			
			private function exitStateOpen(event:Event):void {
				dropDown.removeEventListener("resizeEnd", resizeFinished, false);
			}
		]]>
	</fx:Script>
	
	<!--
	NOTE: this skin file contains sub-parts that may continue to react to
	Style code.  To remove this behavior create new copies of those skins
	and remove the styles.
	-->
	<s:states>
		<s:State name="normal" />
		<s:State name="open" exitState="exitStateOpen(event)"/>
		<s:State name="disabled" />
	</s:states>
	
	<!---
	The PopUpAnchor control that opens the drop-down list. 
	
	<p>In a custom skin class that uses transitions, set the
	<code>itemDestructionPolicy</code> property to <code>none</code>.</p>
	-->
	<s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
				   left="0" right="0" top="0" bottom="0" itemDestructionPolicy="auto"
				   popUpPosition="right" popUpWidthMatchesAnchorWidth="false" chromeColor="#7f9459">
		
		<!---
		This includes borders, background colors, scrollers, and filters.
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown" maxHeight="134" minHeight="22" minWidth="40" initialize="dropDownInit(event)">
			
			<!--- @private -->
			<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.45" distance="7"
									 angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
			
			<!--- @private -->
			<s:Rect id="border" left="0" right="0" top="0" bottom="0">
				<s:stroke>
					<!--- border stroke @private -->
					<s:SolidColorStroke id="borderStroke" weight="1" color="{getStyle('borderColor')}"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background" left="1" right="1" top="1" bottom="1" >
				<s:fill>
					<!---
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill" color="0xFFFFFF" />
				</s:fill>
			</s:Rect>
			
			<!--- @private -->
			<s:Scroller id="scroller" left="0" top="0" right="0" bottom="0" hasFocusableChildren="false" minViewportInset="1">
				<!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
				<s:DataGroup id="dataGroup" itemRenderer="spark.skins.spark.DefaultItemRenderer">
					<s:layout>
						<s:VerticalLayout gap="0" horizontalAlign="contentJustify"/>
					</s:layout>
				</s:DataGroup>
			</s:Scroller>
		</s:Group>
	</s:PopUpAnchor>
	
	<!---  The default skin is DropDownListButtonSkin.
	@copy spark.components.supportClasses.DropDownListBase#openButton
	@see spark.skins.spark.DropDownListButtonSkin -->
	<s:Button id="openButton" left="0" right="0" top="0" bottom="0" focusEnabled="false" skinClass="skins.C8oButtonSkin" styleName="keywords"/>  

	<!--- @copy spark.components.DropDownList#labelDisplay -->
	<s:Label id="labelDisplay" verticalAlign="middle" maxDisplayedLines="1"
			 mouseEnabled="false" mouseChildren="false" color="{getStyle('color')}" 
			 left="6" right="4" top="2" bottom="2" width="100%" verticalCenter="1" /> 

	<s:Label verticalAlign="middle" fontSize="7" textAlign="right"
			 mouseEnabled="false" mouseChildren="false" color="{getStyle('color')}" 
			 right="-4" top="5" bottom="2" verticalCenter="1">\u25bc</s:Label> 
	
</s:SparkSkin>
